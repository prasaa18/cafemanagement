name: cafe-management-cicd

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: us-east-1
  BACKEND_ECR_REPOSITORY: cafe-backend
  FRONTEND_ECR_REPOSITORY: cafe-frontend
  EKS_CLUSTER_NAME: cafe-cluster

jobs:
  Backend-Testing:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./cafemanagement

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Run Maven tests
        run: mvn test

      - name: Run SonarCloud scan
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=${{ secrets.BACKEND_SONAR_PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.SONAR_ORG }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  Frontend-Testing:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI

      - name: Run SonarCloud scan
        run: |
          sonar-scanner \
            -Dsonar.projectKey=${{ secrets.FRONTEND_SONAR_PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.SONAR_ORG }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  Build-And-Push-Images:
    needs: [Backend-Testing, Frontend-Testing]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Build and push backend image
      - name: Build and push backend image
        working-directory: ./cafemanagement
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.BACKEND_ECR_REPOSITORY }}:${{ github.sha }} .
          docker push $ECR_REGISTRY/${{ env.BACKEND_ECR_REPOSITORY }}:${{ github.sha }}
          # Tag as latest also
          docker tag $ECR_REGISTRY/${{ env.BACKEND_ECR_REPOSITORY }}:${{ github.sha }} $ECR_REGISTRY/${{ env.BACKEND_ECR_REPOSITORY }}:latest
          docker push $ECR_REGISTRY/${{ env.BACKEND_ECR_REPOSITORY }}:latest

      # Build and push frontend image
      - name: Build and push frontend image
        working-directory: ./Frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.FRONTEND_ECR_REPOSITORY }}:${{ github.sha }} .
          docker push $ECR_REGISTRY/${{ env.FRONTEND_ECR_REPOSITORY }}:${{ github.sha }}
          # Tag as latest also
          docker tag $ECR_REGISTRY/${{ env.FRONTEND_ECR_REPOSITORY }}:${{ github.sha }} $ECR_REGISTRY/${{ env.FRONTEND_ECR_REPOSITORY }}:latest
          docker push $ECR_REGISTRY/${{ env.FRONTEND_ECR_REPOSITORY }}:latest

  Deploy-To-EKS:
    needs: Build-And-Push-Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Update kube config
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }}

      # Deploy Backend
      - name: Deploy Backend to EKS
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          cluster-name: ${{ env.EKS_CLUSTER_NAME }}
          chart-path: ./cafemanagement/helm
          namespace: cafe-backend
          values: |
            backend.image.repository=${{ steps.login-ecr.outputs.registry }}/${{ env.BACKEND_ECR_REPOSITORY }}
            backend.image.tag=${{ github.sha }}
          name: cafe-backend

      # Deploy Frontend
      - name: Deploy Frontend to EKS
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          cluster-name: ${{ env.EKS_CLUSTER_NAME }}
          chart-path: ./Frontend/helm
          namespace: cafe-frontend
          values: |
            frontend.image.repository=${{ steps.login-ecr.outputs.registry }}/${{ env.FRONTEND_ECR_REPOSITORY }}
            frontend.image.tag=${{ github.sha }}
          name: cafe-frontend
