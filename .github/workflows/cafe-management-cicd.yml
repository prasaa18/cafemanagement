name: cafe-management-cicd

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_DEFAULT_REGION: us-east-1
  BACKEND_ECR_REPOSITORY: cafe-backend
  FRONTEND_ECR_REPOSITORY: cafe-frontend
  EKS_CLUSTER_NAME: cafe-eks

jobs:
  # Backend-Testing:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./cafemanagement
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Java 17
  #       uses: actions/setup-java@v3
  #       with:
  #         java-version: 17
  #         distribution: 'temurin'

  #     - name: Run Maven tests
  #       run: mvn test

  #     - name: Run SonarCloud scan
  #       run: |
  #         mvn sonar:sonar \
  #           -Dsonar.projectKey=${{ secrets.BACKEND_SONAR_PROJECT_KEY }} \
  #           -Dsonar.organization=${{ secrets.SONAR_ORG }} \
  #           -Dsonar.host.url=https://sonarcloud.io \
  #           -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  Frontend-Testing:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Run tests (non-blocking)
        run: npm run test:ci -- --watch=false --progress=false --browsers=ChromeHeadless || true

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.FRONTEND_SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORG }}
            -Dsonar.sources=Frontend/src
            -Dsonar.exclusions=**/node_modules/**,**/*.spec.ts
            -Dsonar.tests=Frontend/src
            -Dsonar.test.inclusions=**/*.spec.ts
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  Build-And-Push-Backend:
    needs: [Backend-Testing]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_DEFAULT_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.REGISTRY }}

      - name: Build and push backend image
        working-directory: ./cafemanagement
        run: |
          docker build -t ${{ secrets.REGISTRY }}/cafe-backend:${{ github.run_number }} .
          docker push ${{ secrets.REGISTRY }}/cafe-backend:${{ github.run_number }}
          docker tag ${{ secrets.REGISTRY }}/cafe-backend:${{ github.run_number }} ${{ secrets.REGISTRY }}/cafe-backend:latest
          docker push ${{ secrets.REGISTRY }}/cafe-backend:latest

  Build-And-Push-Frontend:
    needs: [Frontend-Testing]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_DEFAULT_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.REGISTRY }}

      - name: Build and push frontend image
        working-directory: ./Frontend
        run: |
          docker build -t frontend-app .
          docker tag frontend-app ${{ secrets.REGISTRY }}/cafe-frontend:${{ github.run_number }}
          docker push ${{ secrets.REGISTRY }}/cafe-frontend:${{ github.run_number }}
          docker tag ${{ secrets.REGISTRY }}/cafe-frontend:${{ github.run_number }} ${{ secrets.REGISTRY }}/cafe-frontend:latest
          docker push ${{ secrets.REGISTRY }}/cafe-frontend:latest
  
  Deploy-To-EKS:
   needs: [Build-And-Push-Backend, Build-And-Push-Frontend]
   runs-on: ubuntu-latest
   steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Update kube config
      run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Install Helm
      run: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        helm version

    # ✅ Deploy Backend with Helm
    - name: Deploy Backend
      run: |
        helm upgrade --install cafe-backend ./cafemanagement/helm \
          --namespace cafe-backend --create-namespace \
          --set global.ecrRegistry=${{ secrets.REGISTRY }} \
          --set global.imageTag=${{ github.run_number }}

    # ✅ Deploy Frontend with Helm
    - name: Deploy Frontend
      run: |
        helm upgrade --install cafe-frontend ./Frontend/helm \
          --namespace cafe-frontend --create-namespace \
          --set global.ecrRegistry=${{ secrets.REGISTRY }} \
          --set global.imageTag=${{ github.run_number }} \
          --set global.nginx.config.backendUrl=http://cafe-backend.cafe-backend.svc.cluster.local:8080
        